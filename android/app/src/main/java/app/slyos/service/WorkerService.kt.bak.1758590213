package app.slyos.service

import android.app.Notification
import android.app.NotificationChannel
import android.app.NotificationManager
import android.app.Service
import android.content.Intent
import android.os.Build
import android.os.IBinder
import androidx.core.app.NotificationCompat
import android.util.Log
import app.slyos.Api
import kotlinx.coroutines.*

class WorkerService : Service() {
    companion object {
        private const val CH_ID = "sly_worker"
        private const val CH_NAME = "SlyOS Worker"
        private const val NOTIF_ID = 42
    }

    private val scope = CoroutineScope(SupervisorJob() + Dispatchers.Default)

    override fun onCreate() {
        super.onCreate()
        createChannel()
    }

    override fun onStartCommand(intent: Intent?, flags: Int, startId: Int): Int {
        val notif = NotificationCompat.Builder(this, CH_ID)
            .setContentTitle("SlyOS Worker")
            .setContentText("Running")
            .setSmallIcon(android.R.drawable.stat_notify_sync)
            .setOngoing(true)
            .build()
        startFgCompat(NOTIF_ID, notif)

        scope.launch { loopWork() }
        return START_STICKY
    }

    override fun onDestroy() {
        super.onDestroy()
        scope.cancel()
    }

    override fun onBind(intent: Intent?): IBinder? = null

    private suspend fun loopWork() {
        while (scope.isActive) {
            try {
                val id = Api.claim()
                if (id == null) {
                    Log.d("SlyOS", "Worker: no job, sleeping")
                    delay(5000)
                    continue
                }
                Log.d("SlyOS", "Worker: claimed job $id")

                val text = Api.fetchText(id)
                Log.d("SlyOS", "Worker: fetched text len=${text.length}")

                val embedding = Api.embedDemo(text)
                val ok = if (embedding.isNotEmpty()) {
                    Api.submit(id, embedding)
                } else {
                    Api.submit(id, text)
                }
                Log.d("SlyOS", "Worker: submit ok=$ok")
            } catch (t: Throwable) {
                Log.e("SlyOS", "Worker error: $t")
                delay(2000)
            }
        }
    }

    private fun createChannel() {
        if (Build.VERSION.SDK_INT >= 26) {
            val nm = getSystemService(NOTIFICATION_SERVICE) as NotificationManager
            val ch = NotificationChannel(CH_ID, CH_NAME, NotificationManager.IMPORTANCE_LOW)
            nm.createNotificationChannel(ch)
        }
    }
}

/** startForeground compat with FGS type for API 29+ */
private fun Service.startFgCompat(id: Int, n: Notification) {
    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.Q) {
        startForeground(id, n, android.content.pm.ServiceInfo.FOREGROUND_SERVICE_TYPE_DATA_SYNC)
    } else {
        startForeground(id, n)
    }
}
